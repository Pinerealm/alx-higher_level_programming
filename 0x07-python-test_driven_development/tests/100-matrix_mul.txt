This file contains doctests for the ``matrix_mul`` function in the
``100-matrix_mul.py`` module.

Normal cases
============
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4], [5, 6]])
[[22, 28], [49, 64]]

>>> matrix_mul([[1, 2]], [[1, 2, 3], [4, 5, 6]])
[[9, 12, 15]]

>>> matrix_mul([[1, 2, 3]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])
[[30, 36, 42]]

>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[1], [2], [3]])
[[14], [32]]

>>> matrix_mul([[1], [2], [3]], [[1, 2, 3]])
[[1, 2, 3], [2, 4, 6], [3, 6, 9]]


Raises TypeError exceptions
===========================
** If one or both matrices are not lists
----------------------------------------
>>> matrix_mul(1, [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: m_a must be a list

>>> matrix_mul([[1, 2], [3, 4]], 1)
Traceback (most recent call last):
    ...
TypeError: m_b must be a list

>>> matrix_mul(1, 1)
Traceback (most recent call last):
    ...
TypeError: m_a must be a list

** If one or both matrices are not lists of lists
-------------------------------------------------
>>> matrix_mul([1, 2], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: m_a must be a list of lists

>>> matrix_mul([[1, 2], [3, 4]], [1, 2])
Traceback (most recent call last):
    ...
TypeError: m_b must be a list of lists

>>> matrix_mul([1, 2], [1, 2])
Traceback (most recent call last):
    ...
TypeError: m_a must be a list of lists

** If one element of one or both matrices is not an integer or float
--------------------------------------------------------------------
>>> matrix_mul([[1, 2], [3, '4']], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, '4']])
Traceback (most recent call last):
    ...
TypeError: m_b should contain only integers or floats

>>> matrix_mul([[1, 2], [3, '4']], [[1, 2], [3, '4']])
Traceback (most recent call last):
    ...
TypeError: m_a should contain only integers or floats

** If the rows of a matrix are not all of the same size
---------------------------------------------------------------------
>>> matrix_mul([[1, 2, 3], [4, 5]], [[1, 2], [3, 4], [5, 6]])
Traceback (most recent call last):
    ...
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2], [3, 4], [5, 6]], [[1, 2, 3], [4, 5]])
Traceback (most recent call last):
    ...
TypeError: each row of m_b must be of the same size

>>> matrix_mul([[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5]])
Traceback (most recent call last):
    ...
TypeError: each row of m_a must be of the same size


Raises ValueError exceptions
============================
** If one or both matrices are empty
------------------------------------
>>> matrix_mul([], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2], [3, 4]], [])
Traceback (most recent call last):
    ...
ValueError: m_b can't be empty

>>> matrix_mul([], [])
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

** If the matrices can't be multiplied
--------------------------------------
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2, 3]])
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied

>>> matrix_mul([[1, 2, 3]], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied
