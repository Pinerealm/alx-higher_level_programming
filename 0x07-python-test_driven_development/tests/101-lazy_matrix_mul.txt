This file contains doctests for the ``lazy_matrix_mul`` function in the
``101-lazy_matrix_mul.py`` module.

Normal cases
============
>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
array([[ 7, 10],
       [15, 22]])

>>> lazy_matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4], [5, 6]])
array([[22, 28],
       [49, 64]])

>>> lazy_matrix_mul([[1, 2]], [[1, 2, 3], [4, 5, 6]])
array([[ 9, 12, 15]])

>>> lazy_matrix_mul([[1, 2, 3]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])
array([[30, 36, 42]])

>>> lazy_matrix_mul([[1, 2, 3], [4, 5, 6]], [[1], [2], [3]])
array([[14],
       [32]])

>>> lazy_matrix_mul([[1], [2], [3]], [[1, 2, 3]])
array([[1, 2, 3],
       [2, 4, 6],
       [3, 6, 9]])

>>> lazy_matrix_mul([], [])
0.0

>>> lazy_matrix_mul([1, 2], [1, 2])
5

>>> lazy_matrix_mul([[1, 2], [3, 4]], [1, 2])
array([ 5, 11])

>>> lazy_matrix_mul([1, 2], [[1, 2], [3, 4]])
array([ 7, 10])


Raises TypeError exceptions
===========================
** If one element of one or both matrices is not an integer or float
--------------------------------------------------------------------
>>> lazy_matrix_mul([[1, 2], [3, '4']], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: invalid data type for einsum

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, '4']])
Traceback (most recent call last):
    ...
TypeError: invalid data type for einsum

>>> lazy_matrix_mul([[1, 2], [3, '4']], [[1, 2], [3, '4']])
Traceback (most recent call last):
    ...
TypeError: invalid data type for einsum

** If one or no matrices are passed
------------------------------------
>>> lazy_matrix_mul()
Traceback (most recent call last):
    ...
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> lazy_matrix_mul([[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'


Raises ValueError exceptions
============================
** If the rows of a matrix are not all of the same size
---------------------------------------------------------------------
>>> lazy_matrix_mul([[1, 2, 3], [4, 5]], [[1, 2], [3, 4], [5, 6]])
Traceback (most recent call last):
    ...
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([[1, 2], [3, 4], [5, 6]], [[1, 2, 3], [4, 5]])
Traceback (most recent call last):
    ...
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5]])
Traceback (most recent call last):
    ...
ValueError: setting an array element with a sequence.

** If one or both matrices are empty
------------------------------------
>>> lazy_matrix_mul([], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

>>> lazy_matrix_mul([[1, 2], [3, 4]], [])
Traceback (most recent call last):
    ...
ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

** If the matrices can't be multiplied
--------------------------------------
>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 3]])
Traceback (most recent call last):
    ...
ValueError: shapes (2,2) and (1,3) not aligned: 2 (dim 1) != 1 (dim 0)

>>> lazy_matrix_mul([[1, 2, 3]], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
ValueError: shapes (1,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

** If one or both matrices are not 2D
-------------------------------------
>>> lazy_matrix_mul(1, 1)
Traceback (most recent call last):
    ...
ValueError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul(1, [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
ValueError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul([[1, 2], [3, 4]], 1)
Traceback (most recent call last):
    ...
ValueError: Scalar operands are not allowed, use '*' instead
