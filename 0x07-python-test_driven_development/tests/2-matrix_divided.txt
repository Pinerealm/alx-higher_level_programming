This tests the ``matrix_divided`` function of the ``2-matrix_divided`` module.

Normal cases
============
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix_divided(matrix, 2.5)
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

>>> matrix = [[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]]
>>> matrix_divided(matrix, 3)
[[0.5, 0.83, 1.17], [1.5, 1.83, 2.17]]

>>> matrix_divided(matrix, 2.5)
[[0.6, 1.0, 1.4], [1.8, 2.2, 2.6]]


Raise a TypeError exception
===========================
** If the divisor is not a number
---------------------------------
>>> matrix_divided(matrix, [1, 2, 3])
Traceback (most recent call last):
..........
TypeError: div must be a number

>>> matrix_divided(matrix, 'a')
Traceback (most recent call last):
..........
TypeError: div must be a number

** If the matrix is not a list of lists of integers or floats
-------------------------------------------------------------
>>> matrix_divided([[1, 'a'], [2, 3]], 1)
Traceback (most recent call last):
..........
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([], 1)
Traceback (most recent call last):
..........
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(1, 1)
Traceback (most recent call last):
..........
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[], [1, 2]], 1)
Traceback (most recent call last):
..........
TypeError: matrix must be a matrix (list of lists) of integers/floats

* If the matrix contains rows of different sizes
------------------------------------------------
>>> matrix_divided([[1, 2], [3, 4, 5]], 1)
Traceback (most recent call last):
..........
TypeError: Each row of the matrix must have the same size

Raise a ZeroDivisionError
=========================
* If the divisor is 0
---------------------
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
..........
ZeroDivisionError: division by zero

>>> matrix_divided(matrix, 0.0)
Traceback (most recent call last):
..........
ZeroDivisionError: division by zero

>>> matrix_divided(matrix, 1e-1000)
Traceback (most recent call last):
..........
ZeroDivisionError: division by zero


Raise an OverflowError
======================
* If the divisor is too large
-----------------------------
>>> matrix_divided(matrix, 1e1000)
Traceback (most recent call last):
..........
OverflowError: divisor is too large
